# Build stage
FROM golang:1.24-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    gcc \
    musl-dev \
    sqlite-dev \
    git \
    ca-certificates

WORKDIR /app

# Copy dependency files first for better caching
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Build the application with optimizations
RUN CGO_ENABLED=1 go build \
    -ldflags='-w -s' \
    -o calendar \
    ./cmd/web

# Runtime stage
FROM alpine:3.19

# Install runtime dependencies
RUN apk --no-cache add \
    ca-certificates \
    sqlite \
    tzdata \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S calendar && \
    adduser -S calendar -u 1001 -G calendar -h /app

WORKDIR /app

# Copy binary with proper ownership
COPY --from=builder --chown=calendar:calendar /app/calendar ./calendar

# Ensure calendar user owns the app directory for database files
RUN chown -R calendar:calendar /app

# Ensure binary is executable
RUN chmod +x ./calendar

# Switch to non-root user
USER calendar

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost/healthz || exit 1

# Run the application
CMD ["./calendar"]
